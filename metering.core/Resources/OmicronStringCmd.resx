<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="amp_cfg" xml:space="preserve">
    <value>amp:cfg?</value>
    <comment>the CMC's test set number and the number of available configurations</comment>
  </data>
  <data name="amp_cfg_0" xml:space="preserve">
    <value>amp:cfg?({0})</value>
    <comment>the characteristics of the configuration if the optional &lt;cfg_no&gt; parameter is provided.</comment>
  </data>
  <data name="amp_ctrl_i0_2" xml:space="preserve">
    <value>amp:ctrl(i({0}),{1})</value>
    <comment>This command executes a power optimization of an amplifier for a specific CMC application. {0} = triple number = 1, {1} =  the peak no-load output voltage (in V) of the amplifier outputs.</comment>
  </data>
  <data name="amp_def_clr" xml:space="preserve">
    <value>amp:def(clrnooff)</value>
    <comment>Command to undefine an amplifier.</comment>
  </data>
  <data name="amp_def_off" xml:space="preserve">
    <value>amp:def(off)</value>
    <comment>Turns off unused "EXTERNAL" amplifiers.</comment>
  </data>
  <data name="amp_def_param_0" xml:space="preserve">
    <value>amp:def?({0})</value>
    <comment>Returns the parameters of a specified amplifier. {0} = amp number</comment>
  </data>
  <data name="amp_def_param_0_1" xml:space="preserve">
    <value>amp:def?({0},{1})</value>
    <comment>Returns the parameters of a specified amplifier. {0} = amp number, {1} = int or ext?</comment>
  </data>
  <data name="amp_range_i_0_1" xml:space="preserve">
    <value>amp:range(i({0}),{1})</value>
    <comment>Selects current amplifier range in the CMC.  {0} = amp number,</comment>
  </data>
  <data name="amp_range_v_0_1" xml:space="preserve">
    <value>amp:range(v({0}),{1})</value>
    <comment>Selects voltage amplifier range in the CMC. {0} = amp number,</comment>
  </data>
  <data name="amp_route_clr" xml:space="preserve">
    <value>amp:route(clrnooff)</value>
    <comment>Clears the routings of all triples and the amplifier’s power supply that is turned off (clr) or not (clrnooff).</comment>
  </data>
  <data name="amp_route_i_0_1" xml:space="preserve">
    <value>amp:route(i({0}),{1})</value>
    <comment>This command to get the current route settings of current triple. {0} = amp number, {1} = configuration number</comment>
  </data>
  <data name="amp_route_v_0_1" xml:space="preserve">
    <value>amp:route(v({0}),{1})</value>
    <comment>This command to get the current route settings of voltage triple. {0} = amp number, {1} = configuration number</comment>
  </data>
  <data name="amp_scan" xml:space="preserve">
    <value>amp:scan?</value>
    <comment>Searches for external Omicron amplifiers and returns a list of IDs.</comment>
  </data>
  <data name="out_ana_off" xml:space="preserve">
    <value>out:ana:off</value>
    <comment>Turns Omicron Test Set analog output OFF</comment>
  </data>
  <data name="out_ana_on" xml:space="preserve">
    <value>out:ana:on</value>
    <comment>Turns Omicron Test Set analog output ON</comment>
  </data>
  <data name="out_ana_pmode_0" xml:space="preserve">
    <value>out:ana:pmode({0})</value>
    <comment>Sets the phase mode to Absolute. Options: abs, diff. =&gt; {0} = "abs"</comment>
  </data>
  <data name="out_ana_setOutput" xml:space="preserve">
    <value>out:ana:{0}({1}):a({2});p({3});f({4});wav({5})</value>
    <comment>Apply Omicron Test Set analog signal to specified values. {0} = generator type (v or i), {1} = triplet number (1:1,1:3, 2:2 and etc.), {2} = Magnitude of analog signal, {3} = Phase of analog signal, {4} = Frequency of analog signal, {5} = waveform of the signal (sin, square, etc) use "sin"</comment>
  </data>
</root>